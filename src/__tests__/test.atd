(*
  atdgen -t test.atd
  atdgen -bs test.atd -open Test_t
*)

type myInt = int <ocaml repr="int64">

type r = {
  a: int;
  b: string;
}

type v = [
  | A of int
  | B of string
] <ocaml repr="classic">

type vl = v list

type vp = [
  | A of int
  | B of string
]

type vpl = vp list

type ro = {
  c: string;
  ?o: myInt option;
}

type optional_field = {
  ~with_default <ocaml default="9">: int;
  ?no_default: int option;
  ?no_default_nullable: int nullable;
}

type t = (int * string * float)

type n = int nullable

type container = {
  id: string;
  children: container list;
}

type recurse = {
  recurse_items: recurse list;
}
type mutual_recurse1 = {
  mutual_recurse2: mutual_recurse2 list;
}
type mutual_recurse2 = {
  mutual_recurse1: mutual_recurse1 list;
}

type rec_list = [ Bool | List of rec_list list]
type rec_option = [Bool | Nullable of rec_option option]

type adapted = [
  | A of a
  | B of b
] <json adapter.ocaml="Atdgen_codec_runtime.Json_adapter.Type_field">

type adapted_kind = [
  | A of a
  | B of b
] <json adapter.ocaml="Kind_field">

type adapted_scalar = [
  | A of int
  | B of string
] <json adapter.ocaml="Atdgen_codec_runtime.Json_adapter.Type_field">

type adapted_list = [
  | A of int list
] <json adapter.ocaml="Atdgen_codec_runtime.Json_adapter.Type_field">

type a = {
  thing: string;
  other_thing: bool;
}

type b = {
  thing: int;
}

type an_array = int list <ocaml repr="array">

type deeply_nested = [
 | A of (an_array * rec_list)
]
